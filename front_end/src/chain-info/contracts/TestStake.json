{
  "abi": [
    {
      "inputs": [],
      "name": "collect",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "allSourcePaths": {
    "0": "/Users/benjamin/.brownie/packages/OpenZeppelin/openzeppelin-contracts@4.3.2/contracts/utils/Context.sol",
    "1": "contracts/test/TestStake.sol"
  },
  "ast": {
    "absolutePath": "contracts/test/TestStake.sol",
    "exportedSymbols": {
      "Context": [
        48
      ],
      "TestStake": [
        26
      ]
    },
    "id": 27,
    "license": "MIT",
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 1,
        "literals": [
          "solidity",
          "^",
          "0.8",
          ".0"
        ],
        "nodeType": "PragmaDirective",
        "src": "32:23:1"
      },
      {
        "absolutePath": "/Users/benjamin/.brownie/packages/OpenZeppelin/openzeppelin-contracts@4.3.2/contracts/utils/Context.sol",
        "file": "@openzeppelin/contracts/utils/Context.sol",
        "id": 2,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 27,
        "sourceUnit": 49,
        "src": "57:51:1",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "abstract": false,
        "baseContracts": [
          {
            "baseName": {
              "id": 3,
              "name": "Context",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 48,
              "src": "132:7:1"
            },
            "id": 4,
            "nodeType": "InheritanceSpecifier",
            "src": "132:7:1"
          }
        ],
        "canonicalName": "TestStake",
        "contractDependencies": [],
        "contractKind": "contract",
        "fullyImplemented": true,
        "id": 26,
        "linearizedBaseContracts": [
          26,
          48
        ],
        "name": "TestStake",
        "nameLocation": "119:9:1",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "body": {
              "id": 7,
              "nodeType": "Block",
              "src": "173:7:1",
              "statements": []
            },
            "id": 8,
            "implemented": true,
            "kind": "receive",
            "modifiers": [],
            "name": "",
            "nameLocation": "-1:-1:-1",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 5,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "153:2:1"
            },
            "returnParameters": {
              "id": 6,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "173:0:1"
            },
            "scope": 26,
            "src": "146:34:1",
            "stateMutability": "payable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "body": {
              "id": 24,
              "nodeType": "Block",
              "src": "213:124:1",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 19,
                              "name": "this",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": -28,
                              "src": "313:4:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_contract$_TestStake_$26",
                                "typeString": "contract TestStake"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_contract$_TestStake_$26",
                                "typeString": "contract TestStake"
                              }
                            ],
                            "id": 18,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "nodeType": "ElementaryTypeNameExpression",
                            "src": "305:7:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_address_$",
                              "typeString": "type(address)"
                            },
                            "typeName": {
                              "id": 17,
                              "name": "address",
                              "nodeType": "ElementaryTypeName",
                              "src": "305:7:1",
                              "typeDescriptions": {}
                            }
                          },
                          "id": 20,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "typeConversion",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "305:13:1",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "id": 21,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "balance",
                        "nodeType": "MemberAccess",
                        "src": "305:21:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [],
                            "expression": {
                              "argumentTypes": [],
                              "id": 13,
                              "name": "_msgSender",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 38,
                              "src": "282:10:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
                                "typeString": "function () view returns (address)"
                              }
                            },
                            "id": 14,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "282:12:1",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          ],
                          "id": 12,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "nodeType": "ElementaryTypeNameExpression",
                          "src": "274:8:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_address_payable_$",
                            "typeString": "type(address payable)"
                          },
                          "typeName": {
                            "id": 11,
                            "name": "address",
                            "nodeType": "ElementaryTypeName",
                            "src": "274:8:1",
                            "stateMutability": "payable",
                            "typeDescriptions": {}
                          }
                        },
                        "id": 15,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "typeConversion",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "274:21:1",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        }
                      },
                      "id": 16,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "transfer",
                      "nodeType": "MemberAccess",
                      "src": "274:30:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_transfer_nonpayable$_t_uint256_$returns$__$",
                        "typeString": "function (uint256)"
                      }
                    },
                    "id": 22,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "274:53:1",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 23,
                  "nodeType": "ExpressionStatement",
                  "src": "274:53:1"
                }
              ]
            },
            "functionSelector": "e5225381",
            "id": 25,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "collect",
            "nameLocation": "194:7:1",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 9,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "201:2:1"
            },
            "returnParameters": {
              "id": 10,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "213:0:1"
            },
            "scope": 26,
            "src": "185:152:1",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          }
        ],
        "scope": 27,
        "src": "110:231:1",
        "usedErrors": []
      }
    ],
    "src": "32:310:1"
  },
  "bytecode": "6080604052348015600f57600080fd5b5060a38061001e6000396000f3fe60806040526004361060205760003560e01c8063e522538114602b57600080fd5b36602657005b600080fd5b348015603657600080fd5b50603d603f565b005b60405133904780156108fc02916000818181858888f19350505050158015606a573d6000803e3d6000fd5b5056fea2646970667358221220e13808b28fb7c204b9836f169342a9f9115abd1b05498f31fa2d6a487de7353664736f6c634300080d0033",
  "bytecodeSha1": "4737688b82c080194f2927f131917b97640ff6ea",
  "compiler": {
    "evm_version": "istanbul",
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "version": "0.8.13+commit.abaa5c0e"
  },
  "contractName": "TestStake",
  "coverageMap": {
    "branches": {
      "0": {},
      "1": {}
    },
    "statements": {
      "0": {
        "Context._msgSender": {
          "1": [
            659,
            676
          ]
        }
      },
      "1": {
        "TestStake.collect": {
          "0": [
            274,
            327
          ]
        }
      }
    }
  },
  "dependencies": [
    "OpenZeppelin/openzeppelin-contracts@4.3.2/Context"
  ],
  "deployedBytecode": "60806040526004361060205760003560e01c8063e522538114602b57600080fd5b36602657005b600080fd5b348015603657600080fd5b50603d603f565b005b60405133904780156108fc02916000818181858888f19350505050158015606a573d6000803e3d6000fd5b5056fea2646970667358221220e13808b28fb7c204b9836f169342a9f9115abd1b05498f31fa2d6a487de7353664736f6c634300080d0033",
  "deployedSourceMap": "110:231:1:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;185:152;;;;;;;;;;;;;:::i;:::-;;;274:53;;666:10:0;;305:21:1;274:53;;;;;;;;;305:21;666:10:0;274:53:1;;;;;;;;;;;;;;;;;;;;;185:152::o",
  "language": "Solidity",
  "natspec": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "offset": [
    110,
    341
  ],
  "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH1 0x20 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0xE5225381 EQ PUSH1 0x2B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST CALLDATASIZE PUSH1 0x26 JUMPI STOP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH1 0x36 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x3D PUSH1 0x3F JUMP JUMPDEST STOP JUMPDEST PUSH1 0x40 MLOAD CALLER SWAP1 SELFBALANCE DUP1 ISZERO PUSH2 0x8FC MUL SWAP2 PUSH1 0x0 DUP2 DUP2 DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH1 0x6A JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xE1 CODESIZE ADDMOD 0xB2 DUP16 0xB7 0xC2 DIV 0xB9 DUP4 PUSH16 0x169342A9F9115ABD1B05498F31FA2D6A BASEFEE PUSH30 0xE7353664736F6C634300080D003300000000000000000000000000000000 ",
  "pcMap": {
    "0": {
      "offset": [
        110,
        341
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x80"
    },
    "2": {
      "fn": null,
      "offset": [
        110,
        341
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "4": {
      "fn": null,
      "offset": [
        110,
        341
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "5": {
      "fn": null,
      "offset": [
        110,
        341
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x4"
    },
    "7": {
      "fn": null,
      "offset": [
        110,
        341
      ],
      "op": "CALLDATASIZE",
      "path": "1"
    },
    "8": {
      "fn": null,
      "offset": [
        110,
        341
      ],
      "op": "LT",
      "path": "1"
    },
    "9": {
      "fn": null,
      "offset": [
        110,
        341
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x20"
    },
    "11": {
      "fn": null,
      "offset": [
        110,
        341
      ],
      "op": "JUMPI",
      "path": "1"
    },
    "12": {
      "fn": null,
      "offset": [
        110,
        341
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "14": {
      "fn": null,
      "offset": [
        110,
        341
      ],
      "op": "CALLDATALOAD",
      "path": "1"
    },
    "15": {
      "fn": null,
      "offset": [
        110,
        341
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0xE0"
    },
    "17": {
      "fn": null,
      "offset": [
        110,
        341
      ],
      "op": "SHR",
      "path": "1"
    },
    "18": {
      "fn": null,
      "offset": [
        110,
        341
      ],
      "op": "DUP1",
      "path": "1"
    },
    "19": {
      "fn": null,
      "offset": [
        110,
        341
      ],
      "op": "PUSH4",
      "path": "1",
      "value": "0xE5225381"
    },
    "24": {
      "fn": null,
      "offset": [
        110,
        341
      ],
      "op": "EQ",
      "path": "1"
    },
    "25": {
      "fn": null,
      "offset": [
        110,
        341
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x2B"
    },
    "27": {
      "fn": null,
      "offset": [
        110,
        341
      ],
      "op": "JUMPI",
      "path": "1"
    },
    "28": {
      "fn": null,
      "offset": [
        110,
        341
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "30": {
      "fn": null,
      "offset": [
        110,
        341
      ],
      "op": "DUP1",
      "path": "1"
    },
    "31": {
      "fn": null,
      "offset": [
        110,
        341
      ],
      "op": "REVERT",
      "path": "1"
    },
    "32": {
      "fn": null,
      "offset": [
        110,
        341
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "33": {
      "fn": null,
      "offset": [
        110,
        341
      ],
      "op": "CALLDATASIZE",
      "path": "1"
    },
    "34": {
      "fn": null,
      "offset": [
        110,
        341
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x26"
    },
    "36": {
      "fn": null,
      "offset": [
        110,
        341
      ],
      "op": "JUMPI",
      "path": "1"
    },
    "37": {
      "fn": null,
      "offset": [
        110,
        341
      ],
      "op": "STOP",
      "path": "1"
    },
    "38": {
      "fn": null,
      "offset": [
        110,
        341
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "39": {
      "fn": null,
      "offset": [
        110,
        341
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "41": {
      "fn": null,
      "offset": [
        110,
        341
      ],
      "op": "DUP1",
      "path": "1"
    },
    "42": {
      "first_revert": true,
      "fn": null,
      "offset": [
        110,
        341
      ],
      "op": "REVERT",
      "path": "1"
    },
    "43": {
      "fn": "TestStake.collect",
      "offset": [
        185,
        337
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "44": {
      "fn": "TestStake.collect",
      "offset": [
        185,
        337
      ],
      "op": "CALLVALUE",
      "path": "1"
    },
    "45": {
      "fn": "TestStake.collect",
      "offset": [
        185,
        337
      ],
      "op": "DUP1",
      "path": "1"
    },
    "46": {
      "fn": "TestStake.collect",
      "offset": [
        185,
        337
      ],
      "op": "ISZERO",
      "path": "1"
    },
    "47": {
      "fn": "TestStake.collect",
      "offset": [
        185,
        337
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x36"
    },
    "49": {
      "fn": "TestStake.collect",
      "offset": [
        185,
        337
      ],
      "op": "JUMPI",
      "path": "1"
    },
    "50": {
      "fn": "TestStake.collect",
      "offset": [
        185,
        337
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "52": {
      "fn": "TestStake.collect",
      "offset": [
        185,
        337
      ],
      "op": "DUP1",
      "path": "1"
    },
    "53": {
      "fn": "TestStake.collect",
      "offset": [
        185,
        337
      ],
      "op": "REVERT",
      "path": "1"
    },
    "54": {
      "fn": "TestStake.collect",
      "offset": [
        185,
        337
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "55": {
      "fn": "TestStake.collect",
      "offset": [
        185,
        337
      ],
      "op": "POP",
      "path": "1"
    },
    "56": {
      "fn": "TestStake.collect",
      "offset": [
        185,
        337
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x3D"
    },
    "58": {
      "fn": "TestStake.collect",
      "offset": [
        185,
        337
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x3F"
    },
    "60": {
      "fn": "TestStake.collect",
      "jump": "i",
      "offset": [
        185,
        337
      ],
      "op": "JUMP",
      "path": "1"
    },
    "61": {
      "fn": "TestStake.collect",
      "offset": [
        185,
        337
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "62": {
      "fn": "TestStake.collect",
      "offset": [
        185,
        337
      ],
      "op": "STOP",
      "path": "1"
    },
    "63": {
      "fn": "TestStake.collect",
      "offset": [
        185,
        337
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "64": {
      "fn": "TestStake.collect",
      "offset": [
        274,
        327
      ],
      "op": "PUSH1",
      "path": "1",
      "statement": 0,
      "value": "0x40"
    },
    "66": {
      "fn": "TestStake.collect",
      "offset": [
        274,
        327
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "67": {
      "fn": "Context._msgSender",
      "offset": [
        666,
        676
      ],
      "op": "CALLER",
      "path": "0",
      "statement": 1
    },
    "68": {
      "fn": "Context._msgSender",
      "offset": [
        666,
        676
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "69": {
      "fn": "TestStake.collect",
      "offset": [
        305,
        326
      ],
      "op": "SELFBALANCE",
      "path": "1"
    },
    "70": {
      "fn": "TestStake.collect",
      "offset": [
        274,
        327
      ],
      "op": "DUP1",
      "path": "1"
    },
    "71": {
      "fn": "TestStake.collect",
      "offset": [
        274,
        327
      ],
      "op": "ISZERO",
      "path": "1"
    },
    "72": {
      "fn": "TestStake.collect",
      "offset": [
        274,
        327
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x8FC"
    },
    "75": {
      "fn": "TestStake.collect",
      "offset": [
        274,
        327
      ],
      "op": "MUL",
      "path": "1"
    },
    "76": {
      "fn": "TestStake.collect",
      "offset": [
        274,
        327
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "77": {
      "fn": "TestStake.collect",
      "offset": [
        274,
        327
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "79": {
      "fn": "TestStake.collect",
      "offset": [
        274,
        327
      ],
      "op": "DUP2",
      "path": "1"
    },
    "80": {
      "fn": "TestStake.collect",
      "offset": [
        274,
        327
      ],
      "op": "DUP2",
      "path": "1"
    },
    "81": {
      "fn": "TestStake.collect",
      "offset": [
        274,
        327
      ],
      "op": "DUP2",
      "path": "1"
    },
    "82": {
      "fn": "TestStake.collect",
      "offset": [
        305,
        326
      ],
      "op": "DUP6",
      "path": "1"
    },
    "83": {
      "fn": "Context._msgSender",
      "offset": [
        666,
        676
      ],
      "op": "DUP9",
      "path": "0"
    },
    "84": {
      "fn": "TestStake.collect",
      "offset": [
        274,
        327
      ],
      "op": "DUP9",
      "path": "1"
    },
    "85": {
      "fn": "TestStake.collect",
      "offset": [
        274,
        327
      ],
      "op": "CALL",
      "path": "1"
    },
    "86": {
      "fn": "TestStake.collect",
      "offset": [
        274,
        327
      ],
      "op": "SWAP4",
      "path": "1"
    },
    "87": {
      "fn": "TestStake.collect",
      "offset": [
        274,
        327
      ],
      "op": "POP",
      "path": "1"
    },
    "88": {
      "fn": "TestStake.collect",
      "offset": [
        274,
        327
      ],
      "op": "POP",
      "path": "1"
    },
    "89": {
      "fn": "TestStake.collect",
      "offset": [
        274,
        327
      ],
      "op": "POP",
      "path": "1"
    },
    "90": {
      "fn": "TestStake.collect",
      "offset": [
        274,
        327
      ],
      "op": "POP",
      "path": "1"
    },
    "91": {
      "fn": "TestStake.collect",
      "offset": [
        274,
        327
      ],
      "op": "ISZERO",
      "path": "1"
    },
    "92": {
      "fn": "TestStake.collect",
      "offset": [
        274,
        327
      ],
      "op": "DUP1",
      "path": "1"
    },
    "93": {
      "fn": "TestStake.collect",
      "offset": [
        274,
        327
      ],
      "op": "ISZERO",
      "path": "1"
    },
    "94": {
      "fn": "TestStake.collect",
      "offset": [
        274,
        327
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x6A"
    },
    "96": {
      "fn": "TestStake.collect",
      "offset": [
        274,
        327
      ],
      "op": "JUMPI",
      "path": "1"
    },
    "97": {
      "fn": "TestStake.collect",
      "offset": [
        274,
        327
      ],
      "op": "RETURNDATASIZE",
      "path": "1"
    },
    "98": {
      "fn": "TestStake.collect",
      "offset": [
        274,
        327
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "100": {
      "fn": "TestStake.collect",
      "offset": [
        274,
        327
      ],
      "op": "DUP1",
      "path": "1"
    },
    "101": {
      "fn": "TestStake.collect",
      "offset": [
        274,
        327
      ],
      "op": "RETURNDATACOPY",
      "path": "1"
    },
    "102": {
      "fn": "TestStake.collect",
      "offset": [
        274,
        327
      ],
      "op": "RETURNDATASIZE",
      "path": "1"
    },
    "103": {
      "fn": "TestStake.collect",
      "offset": [
        274,
        327
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "105": {
      "fn": "TestStake.collect",
      "offset": [
        274,
        327
      ],
      "op": "REVERT",
      "path": "1"
    },
    "106": {
      "fn": "TestStake.collect",
      "offset": [
        274,
        327
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "107": {
      "fn": "TestStake.collect",
      "offset": [
        274,
        327
      ],
      "op": "POP",
      "path": "1"
    },
    "108": {
      "fn": "TestStake.collect",
      "jump": "o",
      "offset": [
        185,
        337
      ],
      "op": "JUMP",
      "path": "1"
    }
  },
  "sha1": "24bf9629341e6f2a97d6891c20baa92d39eacac2",
  "source": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/utils/Context.sol\";\n\ncontract TestStake is Context {\n    receive() external payable {\n    }\n    function collect() external {\n        //payable(_msgSender()).send(msg.value*2);\n        payable(_msgSender()).transfer(address(this).balance); //\n    }\n\n\n}\n",
  "sourceMap": "110:231:1:-:0;;;;;;;;;;;;;;;;;;;",
  "sourcePath": "contracts/test/TestStake.sol",
  "type": "contract"
}